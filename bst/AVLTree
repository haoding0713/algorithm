package algorithm.bst;

/**
 * Created by yixin on 11/26/2018.
 */
public class AVLTree<K extends Comparable<K>, V>{

    class Node {
        Node left;
        Node right;
        K key;
        V value;
        int height;
        int size;

        Node(K key, V val, int height, int size) {
            this.key = key;
            this.value = val;
            this.size = size;
            this.height = height;
        }
    }

    /// AVL树的根节点
    private Node root;

    public AVLTree() {

    }

    private V get(K key) {
        return get(root, key);
    }

    private V get(Node node, K key) {
        if(node == null) {
            return null;
        }
        int cmp = key.compareTo(node.key);
        // 递归查找两边子树
        if(cmp < 0) {
            return get(node.left, key);

        } else if(cmp > 0){
            return get(node.right, key);

        } else {
            return node.value;
        }
    }

    private void put(K key, V value) {
        if (key == null) throw new IllegalArgumentException("Key Of NULL is not supported !");
        if (value == null) {
            delete(key);
            return ;
        }
        put(root, key, value);
    }

    private Node put(Node node, K key, V value) {
        if(node == null) {
            return new Node(key, value, 0, 1);
        }

        int cmp = key.compareTo(node.key);
        // 如果Key相等，更新当前Node的value后返回。
        if(cmp == 0) {
            node.value = value;
            return node;
        }
        // 继续在左子树里递归插入
        if (cmp < 0) {
            node.left = put(node.left, key, value);
        }
        // 继续在右子树里递归插入
        else {
            node.right = put(node.right, key, value);
        }

        node.size = 1 + size(node.left) + size(node.right);
        node.height = 1 + Math.max(height(node.left), height(node.right));
        return balance(node);
    }


    /**
     * 旋转保持AVL树的平衡性
     * @param node 当前（子）树
     * @return 平衡后的（子）树
     */
    private Node balance(Node node) {
        if(this.balanceFactor(node) > 1){
            if(this.balanceFactor(node.left) < 0) {
                rotateLeft(node.left);
            }
            node = rotateRight(node);

        } else if (this.balanceFactor(node) < -1) {
            if(this.balanceFactor(node.right) > 0) {
                rotateRight(node.right);
            }
            node = rotateLeft(node);
        }

        return node;
    }


    /**
     * Balance factor是（子）树的左右高度差
     * @param node 当前（子）树
     * @return 高度差 = 左子树高度- 右子树高度
     */
    private int balanceFactor(Node node) {
        return height(node.left) - height(node.right);
    }
    /**
     * 右旋函数
     * @param x subtree
     * @return subtree
     */
    private Node rotateRight(Node x) {
        Node y = x.left;
        x.left = y.right;
        y.right = x;
        y.size = x.size;
        x.size = 1 + size(x.left) + size(x.right);
        x.height = 1 + Math.max(height(x.left), height(x.right));
        y.height = 1 + Math.max(height(y.left), height(y.right));
        return y;
    }

    /**
     * 左旋函数
     * @param x subtree
     * @return subtree
     */
    private Node rotateLeft(Node x) {
        Node y = x.right;
        x.right = y.left;
        y.left = x;
        y.size = x.size;
        x.size = 1 + size(x.left) + size(x.right);
        x.height = 1 + Math.max(height(x.left), height(x.right));
        y.height = 1 + Math.max(height(y.left), height(y.right));
        return y;
    }


    /**
     * 删除元素
     * @param key 待删除的Key
     */
    private void delete(K key) {
        // TODO: DELETE PART
        if (key == null) {
            throw new IllegalArgumentException("argument to delete() is null");
        }
        if (!this.contains(root, key)) {
            return;
        }
        root = delete(root, key);
    }


    /**
     * 在子树中，删除Key
     * @param x
     * @param key
     * @return
     */
    private Node delete(Node x, K key) {
        int cmp = key.compareTo(x.key);
        if (cmp < 0) {
            x.left = delete(x.left, key);
        }
        else if (cmp > 0) {
            x.right = delete(x.right, key);
        }
        else {
            if (x.left == null) {
                return x.right;
            }
            else if (x.right == null) {
                return x.left;
            }
            else {
                Node y = x;
                x = min(y.right);
                x.right = deleteMin(y.right);
                x.left = y.left;
            }
        }
        x.size = 1 + size(x.left) + size(x.right);
        x.height = 1 + Math.max(height(x.left), height(x.right));
        return balance(x);
    }


    /**
     * Returns the node with the smallest key in the subtree.
     *
     * @param x the subtree
     * @return the node with the smallest key in the subtree
     */
    private Node min(Node x) {
        if (x.left == null) return x;
        return min(x.left);
    }


    /**
     * 在子树中，删除最小的Key以及对应的Value
     * @param x
     * @return
     */
    private Node deleteMin(Node x) {
        if (x.left == null) return x.right;
        x.left = deleteMin(x.left);
        x.size = 1 + size(x.left) + size(x.right);
        x.height = 1 + Math.max(height(x.left), height(x.right));
        return balance(x);
    }

    /**
     * 查找是否存在Key
     * @param node
     * @param key
     * @return
     */
    private boolean contains(Node node, K key) {
        if (node == null) {
            return false;
        }
        int cmp = key.compareTo(node.key);
        if(cmp == 0) {
            return true;

        } else if (cmp < 0) {
            return contains(node.left, key);

        } else {
            return contains(node.right, key);
        }
    }



    private int size(Node x) {
        if (x == null) return 0;
        return x.size;
    }

    private int height(Node x) {
        if (x == null) return -1;
        return x.height;
    }
}
