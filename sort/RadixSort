package main.sorting;

public class RadixSort {

    public static final Integer SIZE = 15;
    public static final Integer RANGE = 1000;

    public static void main(String[] args) {
        final RandomSeed seed = new RandomSeed(SIZE);
        Integer[] input = seed.getRandomSeedForSorting(RANGE);
        // input = new Integer[]{3221, 1, 10, 9680, 577, 9420, 7, 5622, 4793, 2030, 3138, 82, 2599, 743, 4127};
        System.out.println();
        System.out.println("After Sort :");

        Integer[] result = radixSort(input, RANGE);
        for (Integer integer : result) {
            System.out.print(integer + ", ");
        }
    }

    public static Integer[] radixSort(Integer[] input, Integer range){
        // For now, I use two-dimension array for implementation.
        // Later, linked list may be a better choice
        int[][] buckets = null;
        int[] sizeOfBucket = null;

        int maxIteration = (int)Math.log10(range);
        System.out.println("log10 + (" + range + ") = " + maxIteration);

        for(int iteration = 0; iteration < maxIteration; iteration++) {
            buckets = new int[10][input.length];
            sizeOfBucket = new int[input.length];

            for (Integer num : input) {
                int digit = 0;
                if(iteration == 0) {
                    digit = num % 10;
                } else {
                    digit = (int) (num / ( Math.pow(10.0, ((double)iteration))) % 10);
                }
                buckets[digit][sizeOfBucket[digit]] = num;
                sizeOfBucket[digit] += 1;
            }

            int pos = 0;
            for(int i = 0; i< buckets.length; i++) {
                for(int j = 0; j < buckets[i].length; j++) {
                    if(buckets[i][j] > 0) {
                        input[pos++] = buckets[i][j];
                    }
                }
            }
        }

        return input;
    }
}
